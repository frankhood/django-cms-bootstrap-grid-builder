{"remainingRequest":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/babel-loader/lib/index.js!/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/davide/work_projects/django-cms-bootstrap-grid-builder/src/helpers/draggableUtils.js","dependencies":[{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/src/helpers/draggableUtils.js","mtime":1636037048256},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/cache-loader/dist/cjs.js","mtime":1633617106424},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/babel-loader/lib/index.js","mtime":1610107261830},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1609411078419}],"contextDependencies":[],"result":["// Get {x, y} positions from event.\nexport function getControlPosition(e) {\n  return offsetXYFromParentOf(e);\n} // Get from offsetParent\n\nexport function offsetXYFromParentOf(evt) {\n  var offsetParent = evt.target.offsetParent || document.body;\n  var offsetParentRect = evt.offsetParent === document.body ? {\n    left: 0,\n    top: 0\n  } : offsetParent.getBoundingClientRect();\n  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n  return {\n    x: x,\n    y: y\n  };\n} // Create an data object exposed by <DraggableCore>'s events\n\nexport function createCoreData(lastX, lastY, x, y) {\n  // State changes are often (but not always!) async. We want the latest value.\n  var isStart = !isNum(lastX);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      deltaX: x - lastX,\n      deltaY: y - lastY,\n      lastX: lastX,\n      lastY: lastY,\n      x: x,\n      y: y\n    };\n  }\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}",{"version":3,"sources":["/Users/davide/work_projects/django-cms-bootstrap-grid-builder/src/helpers/draggableUtils.js"],"names":["getControlPosition","e","offsetXYFromParentOf","evt","offsetParent","target","document","body","offsetParentRect","left","top","getBoundingClientRect","x","clientX","scrollLeft","y","clientY","scrollTop","createCoreData","lastX","lastY","isStart","isNum","deltaX","deltaY","num","isNaN"],"mappings":"AAAA;AACA,OAAO,SAASA,kBAAT,CAA4BC,CAA5B,EAA+B;AACpC,SAAOC,oBAAoB,CAACD,CAAD,CAA3B;AACD,C,CAED;;AACA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;AACxC,MAAMC,YAAY,GAAGD,GAAG,CAACE,MAAJ,CAAWD,YAAX,IAA2BE,QAAQ,CAACC,IAAzD;AACA,MAAMC,gBAAgB,GACpBL,GAAG,CAACC,YAAJ,KAAqBE,QAAQ,CAACC,IAA9B,GACI;AAAEE,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GADJ,GAEIN,YAAY,CAACO,qBAAb,EAHN;AAKA,MAAMC,CAAC,GAAGT,GAAG,CAACU,OAAJ,GAAcT,YAAY,CAACU,UAA3B,GAAwCN,gBAAgB,CAACC,IAAnE;AACA,MAAMM,CAAC,GAAGZ,GAAG,CAACa,OAAJ,GAAcZ,YAAY,CAACa,SAA3B,GAAuCT,gBAAgB,CAACE,GAAlE;AAEA,SAAO;AAAEE,IAAAA,CAAC,EAADA,CAAF;AAAKG,IAAAA,CAAC,EAADA;AAAL,GAAP;AACD,C,CAED;;AACA,OAAO,SAASG,cAAT,CAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCR,CAAtC,EAAyCG,CAAzC,EAA4C;AACjD;AACA,MAAMM,OAAO,GAAG,CAACC,KAAK,CAACH,KAAD,CAAtB;;AAEA,MAAIE,OAAJ,EAAa;AACX;AACA,WAAO;AACLE,MAAAA,MAAM,EAAE,CADH;AAELC,MAAAA,MAAM,EAAE,CAFH;AAGLL,MAAAA,KAAK,EAAEP,CAHF;AAILQ,MAAAA,KAAK,EAAEL,CAJF;AAKLH,MAAAA,CAAC,EAAEA,CALE;AAMLG,MAAAA,CAAC,EAAEA;AANE,KAAP;AAQD,GAVD,MAUO;AACL;AACA,WAAO;AACLQ,MAAAA,MAAM,EAAEX,CAAC,GAAGO,KADP;AAELK,MAAAA,MAAM,EAAET,CAAC,GAAGK,KAFP;AAGLD,MAAAA,KAAK,EAAEA,KAHF;AAILC,MAAAA,KAAK,EAAEA,KAJF;AAKLR,MAAAA,CAAC,EAAEA,CALE;AAMLG,MAAAA,CAAC,EAAEA;AANE,KAAP;AAQD;AACF;;AAED,SAASO,KAAT,CAAeG,GAAf,EAAoB;AAClB,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2B,CAACC,KAAK,CAACD,GAAD,CAAxC;AACD","sourcesContent":["// Get {x, y} positions from event.\nexport function getControlPosition(e) {\n  return offsetXYFromParentOf(e);\n}\n\n// Get from offsetParent\nexport function offsetXYFromParentOf(evt) {\n  const offsetParent = evt.target.offsetParent || document.body;\n  const offsetParentRect =\n    evt.offsetParent === document.body\n      ? { left: 0, top: 0 }\n      : offsetParent.getBoundingClientRect();\n\n  const x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n  const y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n\n  return { x, y };\n}\n\n// Create an data object exposed by <DraggableCore>'s events\nexport function createCoreData(lastX, lastY, x, y) {\n  // State changes are often (but not always!) async. We want the latest value.\n  const isStart = !isNum(lastX);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y,\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      deltaX: x - lastX,\n      deltaY: y - lastY,\n      lastX: lastX,\n      lastY: lastY,\n      x: x,\n      y: y,\n    };\n  }\n}\n\nfunction isNum(num) {\n  return typeof num === 'number' && !isNaN(num);\n}\n"]}]}