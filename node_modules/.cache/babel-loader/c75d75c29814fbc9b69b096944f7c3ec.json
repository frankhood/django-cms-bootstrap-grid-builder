{"remainingRequest":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/babel-loader/lib/index.js!/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/davide/work_projects/django-cms-bootstrap-grid-builder/src/components/GridLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/src/components/GridLayout.vue","mtime":1636037048254},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/cache-loader/dist/cjs.js","mtime":1633617106424},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/babel-loader/lib/index.js","mtime":1610107261830},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/cache-loader/dist/cjs.js","mtime":1633617106424},{"path":"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/vue-loader/lib/index.js","mtime":1629994279449}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.is-finite\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _defineProperty from \"/Users/davide/work_projects/django-cms-bootstrap-grid-builder/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.some\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.number.constructor\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\n\nvar elementResizeDetectorMaker = require('element-resize-detector');\n\nimport { bottom, compact, getLayoutItem, moveElement, validateLayout, cloneLayout, getAllCollisions } from \"../helpers/utils\";\nimport { getBreakpointFromWidth, getColsFromBreakpoint, findOrGenerateResponsiveLayout } from \"../helpers/responsiveUtils\";\nimport GridItem from \"./GridItem.vue\";\nimport { addWindowEventListener, removeWindowEventListener } from \"../helpers/DOM\";\nexport default {\n  name: 'GridLayout',\n  components: {\n    GridItem: GridItem\n  },\n  provide: function provide() {\n    return {\n      eventBus: null\n    };\n  },\n  props: {\n    // If true, the container height swells and contracts to fit contents\n    autoSize: {\n      type: Boolean,\n      default: true\n    },\n    colNum: {\n      type: Number,\n      default: 12\n    },\n    rowHeight: {\n      type: Number,\n      default: 150\n    },\n    maxRows: {\n      type: Number,\n      default: Infinity\n    },\n    margin: {\n      type: Array,\n      default: function _default() {\n        return [10, 10];\n      }\n    },\n    isDraggable: {\n      type: Boolean,\n      default: true\n    },\n    isResizable: {\n      type: Boolean,\n      default: true\n    },\n    isMirrored: {\n      type: Boolean,\n      default: false\n    },\n    useCssTransforms: {\n      type: Boolean,\n      default: true\n    },\n    verticalCompact: {\n      type: Boolean,\n      default: true\n    },\n    layout: {\n      type: Array,\n      required: true\n    },\n    responsive: {\n      type: Boolean,\n      default: false\n    },\n    breakpoints: {\n      type: Object,\n      default: function _default() {\n        return {\n          lg: 1200,\n          md: 996,\n          sm: 768,\n          xs: 480,\n          xxs: 0\n        };\n      }\n    },\n    cols: {\n      type: Object,\n      default: function _default() {\n        return {\n          lg: 12,\n          md: 10,\n          sm: 6,\n          xs: 4,\n          xxs: 2\n        };\n      }\n    },\n    preventCollision: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      width: null,\n      mergedStyle: {},\n      lastLayoutLength: 0,\n      isDragging: false,\n      placeholder: {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0,\n        i: -1\n      },\n      layouts: {},\n      // array to store all layouts from different breakpoints\n      lastBreakpoint: null,\n      // store last active breakpoint\n      originalLayout: null // store original Layout\n\n    };\n  },\n  watch: {\n    width: function width(newval, oldval) {\n      var self = this;\n      this.$nextTick(function () {\n        var _this = this;\n\n        //this.$broadcast(\"updateWidth\", this.width);\n        this.eventBus.$emit('updateWidth', this.width);\n\n        if (oldval === null) {\n          /*\n                            If oldval == null is when the width has never been\n                            set before. That only occurs when mouting is\n                            finished, and onWindowResize has been called and\n                            this.width has been changed the first time after it\n                            got set to null in the constructor. It is now time\n                            to issue layout-ready events as the GridItems have\n                            their sizes configured properly.\n                             The reason for emitting the layout-ready events on\n                            the next tick is to allow for the newly-emitted\n                            updateWidth event (above) to have reached the\n                            children GridItem-s and had their effect, so we're\n                            sure that they have the final size before we emit\n                            layout-ready (for this GridLayout) and\n                            item-layout-ready (for the GridItem-s).\n                             This way any client event handlers can reliably\n                            invistigate stable sizes of GridItem-s.\n                        */\n          this.$nextTick(function () {\n            _this.$emit('layout-ready', self.layout);\n          });\n        }\n\n        this.updateHeight();\n      });\n    },\n    layout: function layout() {\n      this.layoutUpdate();\n    },\n    colNum: function colNum(val) {\n      this.eventBus.$emit('setColNum', val);\n    },\n    rowHeight: function rowHeight() {\n      this.eventBus.$emit('setRowHeight', this.rowHeight);\n    },\n    isDraggable: function isDraggable() {\n      this.eventBus.$emit('setDraggable', this.isDraggable);\n    },\n    isResizable: function isResizable() {\n      this.eventBus.$emit('setResizable', this.isResizable);\n    },\n    responsive: function responsive() {\n      if (!this.responsive) {\n        this.$emit('update:layout', this.originalLayout);\n        this.eventBus.$emit('setColNum', this.colNum);\n      }\n\n      this.onWindowResize();\n    },\n    maxRows: function maxRows() {\n      this.eventBus.$emit('setMaxRows', this.maxRows);\n    }\n  },\n  created: function created() {\n    var self = this; // Accessible refernces of functions for removing in beforeDestroy\n\n    self.resizeEventHandler = function (eventType, i, x, y, h, w) {\n      self.resizeEvent(eventType, i, x, y, h, w);\n    };\n\n    self.dragEventHandler = function (eventType, i, x, y, h, w) {\n      self.dragEvent(eventType, i, x, y, h, w);\n    };\n\n    self._provided.eventBus = new Vue();\n    self.eventBus = self._provided.eventBus;\n    self.eventBus.$on('resizeEvent', self.resizeEventHandler);\n    self.eventBus.$on('dragEvent', self.dragEventHandler);\n    self.$emit('layout-created', self.layout);\n  },\n  beforeDestroy: function beforeDestroy() {\n    //Remove listeners\n    this.eventBus.$off('resizeEvent', this.resizeEventHandler);\n    this.eventBus.$off('dragEvent', this.dragEventHandler);\n    this.eventBus.$destroy();\n    removeWindowEventListener('resize', this.onWindowResize);\n    this.erd.uninstall(this.$refs.item);\n  },\n  beforeMount: function beforeMount() {\n    this.$emit('layout-before-mount', this.layout);\n  },\n  mounted: function mounted() {\n    this.$emit('layout-mounted', this.layout);\n    this.$nextTick(function () {\n      validateLayout(this.layout);\n      this.originalLayout = this.layout;\n      var self = this;\n      this.$nextTick(function () {\n        self.onWindowResize();\n        self.initResponsiveFeatures();\n        addWindowEventListener('resize', self.onWindowResize);\n        compact(self.layout, self.verticalCompact);\n        self.updateHeight();\n        self.$nextTick(function () {\n          this.erd = elementResizeDetectorMaker({\n            strategy: 'scroll',\n            //<- For ultra performance.\n            // See https://github.com/wnr/element-resize-detector/issues/110 about callOnAdd.\n            callOnAdd: false\n          });\n          this.erd.listenTo(self.$refs.item, function () {\n            self.onWindowResize();\n          });\n        });\n      });\n    });\n  },\n  methods: {\n    layoutUpdate: function layoutUpdate() {\n      if (this.layout !== undefined && this.originalLayout !== null) {\n        if (this.layout.length !== this.originalLayout.length) {\n          var diff = this.findDifference(this.layout, this.originalLayout);\n\n          if (diff.length > 0) {\n            if (this.layout.length > this.originalLayout.length) {\n              this.originalLayout = this.originalLayout.concat(diff);\n            } else {\n              this.originalLayout = this.originalLayout.filter(function (obj) {\n                return !diff.some(function (obj2) {\n                  return obj.i === obj2.i;\n                });\n              });\n            }\n          }\n\n          this.lastLayoutLength = this.layout.length;\n          this.initResponsiveFeatures();\n        }\n\n        compact(this.layout, this.verticalCompact);\n        this.eventBus.$emit('updateWidth', this.width);\n        this.updateHeight();\n      }\n    },\n    updateHeight: function updateHeight() {\n      this.mergedStyle = {\n        height: this.containerHeight()\n      };\n    },\n    onWindowResize: function onWindowResize() {\n      if (this.$refs !== null && this.$refs.item !== null && this.$refs.item !== undefined) {\n        this.width = this.$refs.item.offsetWidth;\n      }\n\n      this.eventBus.$emit('resizeEvent');\n    },\n    containerHeight: function containerHeight() {\n      if (!this.autoSize) return;\n      return bottom(this.layout) * (this.rowHeight + this.margin[1]) + this.margin[1] + 'px';\n    },\n    dragEvent: function dragEvent(eventName, id, x, y, h, w) {\n      var l = getLayoutItem(this.layout, id); //GetLayoutItem sometimes returns null object\n\n      if (l === undefined || l === null) {\n        l = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      if (eventName === 'dragmove' || eventName === 'dragstart') {\n        this.placeholder.i = id;\n        this.placeholder.x = l.x;\n        this.placeholder.y = l.y;\n        this.placeholder.w = w;\n        this.placeholder.h = h;\n        this.$nextTick(function () {\n          this.isDragging = true;\n        });\n        this.eventBus.$emit('updateWidth', this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n        });\n      } // Move the element to the dragged location.\n      // eslint-disable-next-line\n\n\n      this.layout = moveElement(this.layout, l, x, y, true, this.preventCollision);\n      compact(this.layout, this.verticalCompact); // needed because vue can't detect changes on array element properties\n\n      this.eventBus.$emit('compact');\n      this.updateHeight();\n      if (eventName === 'dragend') this.$emit('layout-updated', this.layout);\n    },\n    resizeEvent: function resizeEvent(eventName, id, x, y, h, w) {\n      var l = getLayoutItem(this.layout, id); //GetLayoutItem sometimes return null object\n\n      if (l === undefined || l === null) {\n        l = {\n          h: 0,\n          w: 0\n        };\n      }\n\n      var hasCollisions;\n\n      if (this.preventCollision) {\n        var collisions = getAllCollisions(this.layout, _objectSpread(_objectSpread({}, l), {}, {\n          w: w,\n          h: h\n        })).filter(function (layoutItem) {\n          return layoutItem.i !== l.i;\n        });\n        hasCollisions = collisions.length > 0; // If we're colliding, we need adjust the placeholder.\n\n        if (hasCollisions) {\n          // adjust w && h to maximum allowed space\n          var leastX = Infinity,\n              leastY = Infinity;\n          collisions.forEach(function (layoutItem) {\n            if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\n            if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\n          });\n          if (Number.isFinite(leastX)) l.w = leastX - l.x;\n          if (Number.isFinite(leastY)) l.h = leastY - l.y;\n        }\n      }\n\n      if (!hasCollisions) {\n        // Set new width and height.\n        l.w = w;\n        l.h = h;\n      }\n\n      if (eventName === 'resizestart' || eventName === 'resizemove') {\n        this.placeholder.i = id;\n        this.placeholder.x = x;\n        this.placeholder.y = y;\n        this.placeholder.w = l.w;\n        this.placeholder.h = l.h;\n        this.$nextTick(function () {\n          this.isDragging = true;\n        }); //this.$broadcast(\"updateWidth\", this.width);\n\n        this.eventBus.$emit('updateWidth', this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n        });\n      }\n\n      if (this.responsive) this.responsiveGridLayout();\n      compact(this.layout, this.verticalCompact);\n      this.eventBus.$emit('compact');\n      this.updateHeight();\n      if (eventName === 'resizeend') this.$emit('layout-updated', this.layout);\n    },\n    // finds or generates new layouts for set breakpoints\n    responsiveGridLayout: function responsiveGridLayout() {\n      var newBreakpoint = getBreakpointFromWidth(this.breakpoints, this.width);\n      var newCols = getColsFromBreakpoint(newBreakpoint, this.cols); // save actual layout in layouts\n\n      if (this.lastBreakpoint != null && !this.layouts[this.lastBreakpoint]) this.layouts[this.lastBreakpoint] = cloneLayout(this.layout); // Find or generate a new layout.\n\n      var layout = findOrGenerateResponsiveLayout(this.originalLayout, this.layouts, this.breakpoints, newBreakpoint, this.lastBreakpoint, newCols, this.verticalCompact); // Store the new layout.\n\n      this.layouts[newBreakpoint] = layout; // new prop sync\n\n      this.$emit('update:layout', layout);\n      this.lastBreakpoint = newBreakpoint;\n      this.eventBus.$emit('setColNum', getColsFromBreakpoint(newBreakpoint, this.cols));\n    },\n    // clear all responsive layouts\n    initResponsiveFeatures: function initResponsiveFeatures() {\n      // clear layouts\n      this.layouts = {};\n    },\n    // find difference in layouts\n    findDifference: function findDifference(layout, originalLayout) {\n      //Find values that are in result1 but not in result2\n      var uniqueResultOne = layout.filter(function (obj) {\n        return !originalLayout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      }); //Find values that are in result2 but not in result1\n\n      var uniqueResultTwo = originalLayout.filter(function (obj) {\n        return !layout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      }); //Combine the two arrays of unique entries#\n\n      return uniqueResultOne.concat(uniqueResultTwo);\n    }\n  }\n};",{"version":3,"sources":["GridLayout.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div ref=\"item\" class=\"vue-grid-layout\" :style=\"mergedStyle\">\n    <slot></slot>\n    <grid-item\n      v-show=\"isDragging\"\n      class=\"vue-grid-placeholder\"\n      :x=\"placeholder.x\"\n      :y=\"placeholder.y\"\n      :w=\"placeholder.w\"\n      :h=\"placeholder.h\"\n      :i=\"placeholder.i\"\n    ></grid-item>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue';\nvar elementResizeDetectorMaker = require('element-resize-detector');\n\nimport {\n  bottom,\n  compact,\n  getLayoutItem,\n  moveElement,\n  validateLayout,\n  cloneLayout,\n  getAllCollisions,\n} from '../helpers/utils';\nimport {\n  getBreakpointFromWidth,\n  getColsFromBreakpoint,\n  findOrGenerateResponsiveLayout,\n} from '../helpers/responsiveUtils';\n\nimport GridItem from './GridItem.vue';\nimport {\n  addWindowEventListener,\n  removeWindowEventListener,\n} from '../helpers/DOM';\n\nexport default {\n  name: 'GridLayout',\n  components: {\n    GridItem,\n  },\n  provide() {\n    return {\n      eventBus: null,\n    };\n  },\n  props: {\n    // If true, the container height swells and contracts to fit contents\n    autoSize: {\n      type: Boolean,\n      default: true,\n    },\n    colNum: {\n      type: Number,\n      default: 12,\n    },\n    rowHeight: {\n      type: Number,\n      default: 150,\n    },\n    maxRows: {\n      type: Number,\n      default: Infinity,\n    },\n    margin: {\n      type: Array,\n      default: function () {\n        return [10, 10];\n      },\n    },\n    isDraggable: {\n      type: Boolean,\n      default: true,\n    },\n    isResizable: {\n      type: Boolean,\n      default: true,\n    },\n    isMirrored: {\n      type: Boolean,\n      default: false,\n    },\n    useCssTransforms: {\n      type: Boolean,\n      default: true,\n    },\n    verticalCompact: {\n      type: Boolean,\n      default: true,\n    },\n    layout: {\n      type: Array,\n      required: true,\n    },\n    responsive: {\n      type: Boolean,\n      default: false,\n    },\n    breakpoints: {\n      type: Object,\n      default: function () {\n        return { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 };\n      },\n    },\n    cols: {\n      type: Object,\n      default: function () {\n        return { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 };\n      },\n    },\n    preventCollision: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  data: function () {\n    return {\n      width: null,\n      mergedStyle: {},\n      lastLayoutLength: 0,\n      isDragging: false,\n      placeholder: {\n        x: 0,\n        y: 0,\n        w: 0,\n        h: 0,\n        i: -1,\n      },\n      layouts: {}, // array to store all layouts from different breakpoints\n      lastBreakpoint: null, // store last active breakpoint\n      originalLayout: null, // store original Layout\n    };\n  },\n  watch: {\n    width: function (newval, oldval) {\n      const self = this;\n      this.$nextTick(function () {\n        //this.$broadcast(\"updateWidth\", this.width);\n        this.eventBus.$emit('updateWidth', this.width);\n        if (oldval === null) {\n          /*\n                            If oldval == null is when the width has never been\n                            set before. That only occurs when mouting is\n                            finished, and onWindowResize has been called and\n                            this.width has been changed the first time after it\n                            got set to null in the constructor. It is now time\n                            to issue layout-ready events as the GridItems have\n                            their sizes configured properly.\n\n                            The reason for emitting the layout-ready events on\n                            the next tick is to allow for the newly-emitted\n                            updateWidth event (above) to have reached the\n                            children GridItem-s and had their effect, so we're\n                            sure that they have the final size before we emit\n                            layout-ready (for this GridLayout) and\n                            item-layout-ready (for the GridItem-s).\n\n                            This way any client event handlers can reliably\n                            invistigate stable sizes of GridItem-s.\n                        */\n          this.$nextTick(() => {\n            this.$emit('layout-ready', self.layout);\n          });\n        }\n        this.updateHeight();\n      });\n    },\n    layout: function () {\n      this.layoutUpdate();\n    },\n    colNum: function (val) {\n      this.eventBus.$emit('setColNum', val);\n    },\n    rowHeight: function () {\n      this.eventBus.$emit('setRowHeight', this.rowHeight);\n    },\n    isDraggable: function () {\n      this.eventBus.$emit('setDraggable', this.isDraggable);\n    },\n    isResizable: function () {\n      this.eventBus.$emit('setResizable', this.isResizable);\n    },\n    responsive() {\n      if (!this.responsive) {\n        this.$emit('update:layout', this.originalLayout);\n        this.eventBus.$emit('setColNum', this.colNum);\n      }\n      this.onWindowResize();\n    },\n    maxRows: function () {\n      this.eventBus.$emit('setMaxRows', this.maxRows);\n    },\n  },\n  created() {\n    const self = this;\n\n    // Accessible refernces of functions for removing in beforeDestroy\n    self.resizeEventHandler = function (eventType, i, x, y, h, w) {\n      self.resizeEvent(eventType, i, x, y, h, w);\n    };\n\n    self.dragEventHandler = function (eventType, i, x, y, h, w) {\n      self.dragEvent(eventType, i, x, y, h, w);\n    };\n\n    self._provided.eventBus = new Vue();\n    self.eventBus = self._provided.eventBus;\n    self.eventBus.$on('resizeEvent', self.resizeEventHandler);\n    self.eventBus.$on('dragEvent', self.dragEventHandler);\n    self.$emit('layout-created', self.layout);\n  },\n  beforeDestroy: function () {\n    //Remove listeners\n    this.eventBus.$off('resizeEvent', this.resizeEventHandler);\n    this.eventBus.$off('dragEvent', this.dragEventHandler);\n    this.eventBus.$destroy();\n    removeWindowEventListener('resize', this.onWindowResize);\n    this.erd.uninstall(this.$refs.item);\n  },\n  beforeMount: function () {\n    this.$emit('layout-before-mount', this.layout);\n  },\n  mounted: function () {\n    this.$emit('layout-mounted', this.layout);\n    this.$nextTick(function () {\n      validateLayout(this.layout);\n\n      this.originalLayout = this.layout;\n      const self = this;\n      this.$nextTick(function () {\n        self.onWindowResize();\n\n        self.initResponsiveFeatures();\n\n        addWindowEventListener('resize', self.onWindowResize);\n\n        compact(self.layout, self.verticalCompact);\n\n        self.updateHeight();\n        self.$nextTick(function () {\n          this.erd = elementResizeDetectorMaker({\n            strategy: 'scroll', //<- For ultra performance.\n            // See https://github.com/wnr/element-resize-detector/issues/110 about callOnAdd.\n            callOnAdd: false,\n          });\n          this.erd.listenTo(self.$refs.item, function () {\n            self.onWindowResize();\n          });\n        });\n      });\n    });\n  },\n  methods: {\n    layoutUpdate() {\n      if (this.layout !== undefined && this.originalLayout !== null) {\n        if (this.layout.length !== this.originalLayout.length) {\n          let diff = this.findDifference(this.layout, this.originalLayout);\n          if (diff.length > 0) {\n            if (this.layout.length > this.originalLayout.length) {\n              this.originalLayout = this.originalLayout.concat(diff);\n            } else {\n              this.originalLayout = this.originalLayout.filter((obj) => {\n                return !diff.some((obj2) => {\n                  return obj.i === obj2.i;\n                });\n              });\n            }\n          }\n\n          this.lastLayoutLength = this.layout.length;\n          this.initResponsiveFeatures();\n        }\n\n        compact(this.layout, this.verticalCompact);\n        this.eventBus.$emit('updateWidth', this.width);\n        this.updateHeight();\n      }\n    },\n    updateHeight: function () {\n      this.mergedStyle = {\n        height: this.containerHeight(),\n      };\n    },\n    onWindowResize: function () {\n      if (\n        this.$refs !== null &&\n        this.$refs.item !== null &&\n        this.$refs.item !== undefined\n      ) {\n        this.width = this.$refs.item.offsetWidth;\n      }\n      this.eventBus.$emit('resizeEvent');\n    },\n    containerHeight: function () {\n      if (!this.autoSize) return;\n      return (\n        bottom(this.layout) * (this.rowHeight + this.margin[1]) +\n        this.margin[1] +\n        'px'\n      );\n    },\n    dragEvent: function (eventName, id, x, y, h, w) {\n      let l = getLayoutItem(this.layout, id);\n      //GetLayoutItem sometimes returns null object\n      if (l === undefined || l === null) {\n        l = { x: 0, y: 0 };\n      }\n\n      if (eventName === 'dragmove' || eventName === 'dragstart') {\n        this.placeholder.i = id;\n        this.placeholder.x = l.x;\n        this.placeholder.y = l.y;\n        this.placeholder.w = w;\n        this.placeholder.h = h;\n        this.$nextTick(function () {\n          this.isDragging = true;\n        });\n        this.eventBus.$emit('updateWidth', this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n        });\n      }\n\n      // Move the element to the dragged location.\n      // eslint-disable-next-line\n      this.layout = moveElement(\n        this.layout,\n        l,\n        x,\n        y,\n        true,\n        this.preventCollision\n      );\n      compact(this.layout, this.verticalCompact);\n      // needed because vue can't detect changes on array element properties\n      this.eventBus.$emit('compact');\n      this.updateHeight();\n      if (eventName === 'dragend') this.$emit('layout-updated', this.layout);\n    },\n    resizeEvent: function (eventName, id, x, y, h, w) {\n      let l = getLayoutItem(this.layout, id);\n      //GetLayoutItem sometimes return null object\n      if (l === undefined || l === null) {\n        l = { h: 0, w: 0 };\n      }\n\n      let hasCollisions;\n      if (this.preventCollision) {\n        const collisions = getAllCollisions(this.layout, { ...l, w, h }).filter(\n          (layoutItem) => layoutItem.i !== l.i\n        );\n        hasCollisions = collisions.length > 0;\n\n        // If we're colliding, we need adjust the placeholder.\n        if (hasCollisions) {\n          // adjust w && h to maximum allowed space\n          let leastX = Infinity,\n            leastY = Infinity;\n          collisions.forEach((layoutItem) => {\n            if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\n            if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\n          });\n\n          if (Number.isFinite(leastX)) l.w = leastX - l.x;\n          if (Number.isFinite(leastY)) l.h = leastY - l.y;\n        }\n      }\n\n      if (!hasCollisions) {\n        // Set new width and height.\n        l.w = w;\n        l.h = h;\n      }\n\n      if (eventName === 'resizestart' || eventName === 'resizemove') {\n        this.placeholder.i = id;\n        this.placeholder.x = x;\n        this.placeholder.y = y;\n        this.placeholder.w = l.w;\n        this.placeholder.h = l.h;\n        this.$nextTick(function () {\n          this.isDragging = true;\n        });\n        //this.$broadcast(\"updateWidth\", this.width);\n        this.eventBus.$emit('updateWidth', this.width);\n      } else {\n        this.$nextTick(function () {\n          this.isDragging = false;\n        });\n      }\n\n      if (this.responsive) this.responsiveGridLayout();\n\n      compact(this.layout, this.verticalCompact);\n      this.eventBus.$emit('compact');\n      this.updateHeight();\n\n      if (eventName === 'resizeend') this.$emit('layout-updated', this.layout);\n    },\n\n    // finds or generates new layouts for set breakpoints\n    responsiveGridLayout() {\n      let newBreakpoint = getBreakpointFromWidth(this.breakpoints, this.width);\n      let newCols = getColsFromBreakpoint(newBreakpoint, this.cols);\n\n      // save actual layout in layouts\n      if (this.lastBreakpoint != null && !this.layouts[this.lastBreakpoint])\n        this.layouts[this.lastBreakpoint] = cloneLayout(this.layout);\n\n      // Find or generate a new layout.\n      let layout = findOrGenerateResponsiveLayout(\n        this.originalLayout,\n        this.layouts,\n        this.breakpoints,\n        newBreakpoint,\n        this.lastBreakpoint,\n        newCols,\n        this.verticalCompact\n      );\n\n      // Store the new layout.\n      this.layouts[newBreakpoint] = layout;\n\n      // new prop sync\n      this.$emit('update:layout', layout);\n\n      this.lastBreakpoint = newBreakpoint;\n      this.eventBus.$emit(\n        'setColNum',\n        getColsFromBreakpoint(newBreakpoint, this.cols)\n      );\n    },\n\n    // clear all responsive layouts\n    initResponsiveFeatures() {\n      // clear layouts\n      this.layouts = {};\n    },\n\n    // find difference in layouts\n    findDifference(layout, originalLayout) {\n      //Find values that are in result1 but not in result2\n      let uniqueResultOne = layout.filter(function (obj) {\n        return !originalLayout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      });\n\n      //Find values that are in result2 but not in result1\n      let uniqueResultTwo = originalLayout.filter(function (obj) {\n        return !layout.some(function (obj2) {\n          return obj.i === obj2.i;\n        });\n      });\n\n      //Combine the two arrays of unique entries#\n      return uniqueResultOne.concat(uniqueResultTwo);\n    },\n  },\n};\n</script>\n\n<style scoped>\n.vue-grid-layout {\n  position: relative;\n  transition: height 200ms ease;\n}\n</style>\n"],"sourceRoot":"src/components"}]}